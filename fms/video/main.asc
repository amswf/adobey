/*
 * (C) Copyright 2007 Adobe Systems Incorporated. All Rights Reserved.
 *
 * NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the 
 * terms of the Adobe license agreement accompanying it.  If you have received this file from a 
 * source other than Adobe, then your use, modification, or distribution of it requires the prior 
 * written permission of Adobe. 
 * THIS CODE AND INFORMATION IS PROVIDED "AS-IS" WITHOUT WARRANTY OF
 * ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 * PARTICULAR PURPOSE.
 *
 *  THIS CODE IS NOT SUPPORTED BY Adobe Systems Incorporated.
 *
 */


// main.asc file
// server-side actionscript

var nc;
var ns;

//本地文件管理
/*var rootFile = new File("/streams/_definst_");
var list = rootFile.list();
var file = list[0];
file.copyTo("/streams/_definst_/cp.flv");
trace(file.name);*/

// create an XML document
var doc = new XML();

// create an XML node using createElement()
var table = doc.createElement("table");

// place the new node into the XML tree
doc.appendChild(table);

var record = doc.createElement("record");

table.appendChild(record);

// create an XML text node using createTextNode()
var field = doc.createElement("field");

record.appendChild(field);

var valueText = doc.createTextNode("你好！");

field.appendChild(valueText);

// place the new node into the XML tree

var str = doc.toString();

trace(str);

// place the new node into the XML tree



//(new File("/streams/_definst_/default.xml")).copyTo("/streams/_definst_/table.xml");

var rootFile = new File("/streams/_definst_/table.xml")
if(doc != null){
	rootFile.open("utf8","write");
	
	rootFile.type = "utf8";
	
	rootFile.write(str);

	rootFile.flush();
	
	rootFile.close();
}


//web service
load ("webservices/WebServices.asc");
var wsdlUrl = "http://192.168.0.22:7080/XfireSpring/servlet/XFireServlet/IMathService?wsdl";
 
stockService = new WebService(wsdlUrl);

stockService.onLoad = function(wsdl){
	trace(wsdl);
}

stockService.onFault = function(fault){
	trace(fault);
}

callback = stockService.add(23, 23);

callback.onResult = function(result){
	// 接收SOAP输出，本例中它被解串为一个结构体（ActionScript对象）。
	trace(result);
}
// 处理一个错误结果。
callback.onFault = function(fault){
	// 捕获SOAP故障并按照这个应用程序的需要来处理它。
	trace(fault.faultstring);
}


//计时器
setInterval(clearLiveName,2000);

function clearLiveName(){
	var clients = application.clients;
	var liveNames = new Array();
	for(var i = 0;i<clients.length;i++){
		var cname = clients[i].clientName;
		if(cname != null){
			liveNames[cname] = cname;
		}
	}
	var so = SharedObject.get("myRSO",true);
	var list = so.getProperty("liveVideoList");
	if(list != null && list.length > 0){
		for(var i=0;i<list.length;i++){
			var obj = list[i];
			var cname = obj.data;
			if(liveNames[cname] == null){
				list.splice(i,1);
			}
		}
		so.setProperty("liveVideoList",list);
	}
	trace("clear not exist liveName");
}


// Called when a client connects
application.onConnect = function(client,clientName) {
	
	// accept the new client's connection
 	application.acceptConnection(client);
	
	//测试
	
	if(clientName != null){
		
		client.clientName = clientName;
		addLiveVideo(client.clientName);
	 	trace("clientName is exist");  
	}
	else{
		trace("clientName is null");
	}
	
 	// send a message
 	trace("Hello! You are connected!");	
}

// Called when a client disconnects
application.onDisconnect = function(client) {
	
	if(client.clientName != null){
		removeLiveVideo(client.clientName);
	 	trace("clientName is exist");  
	}
	
	trace( "Disconnecting at " + new Date() );
}


// Called when the client publishes
application.onPublish = function(client, myStream) {
	
	trace(myStream.name + " is publishing into application " + application.name);
	
}

application.onUnpublish = function( client, myStream ) {
	trace(myStream.name + " is unpublishing"  );
}

function addLiveVideo(liveName){
	var so = SharedObject.get("myRSO",true);
	var list = so.getProperty("liveVideoList");
	if(list == null){
		list = new Array();
	}
	var obj = new Object();

	obj.label = liveName;

	obj.data = liveName;
	
	list.push(obj);
	
	so.setProperty("liveVideoList",list);
}

function removeLiveVideo(liveName){
	var so = SharedObject.get("myRSO",true);
	var list = so.getProperty("liveVideoList");
	if(list != null && list.length > 0){
		for(var i=0;i<list.length;i++){
			var obj = list[i];
			if(obj.data == liveName){
				list.splice(i,1);
				break;
			}
		}
		so.setProperty("liveVideoList",list);
	}
}









